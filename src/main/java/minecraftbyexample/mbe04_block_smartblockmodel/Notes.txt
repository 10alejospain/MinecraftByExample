MBE04_BLOCK_SMARTBLOCKMODEL

This example shows how to use ISmartBlockModel.
Normal blocks can only have up to 16 different states.  You need to create a JSON file for every single state.
But what if you want a block which needs to display many more?
For example a wool block with 100 different colours, or a camouflage block which copies the texture of the adjacent block?
In these cases you can use an ISmartBlockModel or a TileEntitySpecialRenderer.

Which to choose?
TileEntitySpecialRenderer is often a better (simpler!) choice if the block is animated, or needs fancy rendering, for
  example like an animated chest, or the lettering on a sign.  Your block must have a TileEntity as well.
ISmartBlockModel is often a better (more realistic) choice if the block should have shaded lighting like a normal block,
  or if there are very many of them and they don't need to store information (can calculate their state from adjacent
  blocks). For example - a 3D net which has wires going up,down, west,east,north,south to any adjacent blocks - total of
  2*2*2*2*2*2 = 64 combinations depending on how many adjacent blocks there are.

This example shows the basics of using an ISmartBlockModel.

https://github.com/MinecraftForge/MinecraftForge/blob/master/src/test/java/net/minecraftforge/debug/ModelBakeEventDebug.java
http://www.minecraftforge.net/forum/index.php/topic,29019.msg149531.html#msg149531
http://www.minecraftforge.net/forum/index.php/topic,28714.0.html



- doesn't occupy the entire 1x1x1m space,
- is made up of two pieces (the pole and a sign),
- uses a CUTOUT texture (with seethrough holes)
- has variants (can face in four directions, and can be four different colours)

It will show you
1) how to create a Block class with variants, and register it
2) how to define and register the model for rendering a block with variants
3) how to define and register the items corresponding to the different variants

The blocks will appear in the Blocks tab in the creative inventory.

The pieces you need to understand are located in:
Startup
BlockVariants
ItemBlockVariants
resources\assets\minecraftbyexample\lang\en_US.lang - for the displayed name of the block and items
resources\assets\minecraftbyexample\blockstates\mbe03_block_variants - for the blockstate definition
resources\assets\minecraftbyexample\models\block\mbe03_block_variants_**** - for the models used to render the differnt block types
resources\assets\minecraftbyexample\models\item\mbe03_block_variants_*** - the model for rendering the different block variants as an item
resources\assets\minecraftbyexample\textures\items\mbe03_block_variants_sign_*** - the textures used for the different sign colours

For background information on
- blocks: see here http://greyminecraftcoder.blogspot.com.au/2014/12/blocks-18.html
- rendering blocks: see here http://greyminecraftcoder.blogspot.com.au/p/list-of-topics.html (the topics under the Block Rendering heading)

Useful vanilla classes to look at: BlockBed, BlockDoor, BlockColored

Miscellaneous notes
- the mbe03_block_variants_model_shape defines the sign as "from": [4, 9, 8.01], "to": [12, 13, 8.01]
  The reason for the 8.01 instead of 8 is to make sure that the sign renders just in front of the post.  If you use 8,
  the post face and the sign face "fight" each other to be on top and this leads to weird striping / flickering at the overlap.
- the model_shape file also has the following for the sign- note the flipped north texture by using u values of 13 -> 4 for north instead of 4 -> 13
           "faces": {
                 "north": {"uv": [ 13, 3,  4, 7], "texture": "#sign"},
                 "south": {"uv": [  4, 3, 13, 7], "texture": "#sign"}
             }

- the sign textures have alpha channel information to make the signs pointy.   You need a graphics editor which understands alpha channels
  in order to make textures like this.  GIMP is a good free example.


--------
Common errors:


